{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z-OG9-2-i7yr",
        "outputId": "5f96a5e0-9724-4cde-9553-82539d89695e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "20cm 피자 2개의 면적: 2512.0\n",
            "30cm 피자 1개의 면적: 2826.0\n"
          ]
        }
      ],
      "source": [
        "#피자의 면적을 비교하는 프로그램\n",
        "def main() :\n",
        "  print(\"20cm 피자 2개의 면적:\", get_area(20) * 2)\n",
        "  print(\"30cm 피자 1개의 면적:\", get_area(30))\n",
        "\n",
        "## 원의 면적을 계산한다.\n",
        "# 원의 반지름을 받는 매개변수 radius\n",
        "def get_area(radius) :\n",
        "  if radius > 0 :\n",
        "    area = 3.14 * radius**2\n",
        "  else :\n",
        "    area = 0\n",
        "  return area\n",
        "\n",
        "main()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 디폴트 인수 (default argument)\n",
        "\n",
        "인수가 부족한 경우에 기본값을 넣어주는 메카니즘"
      ],
      "metadata": {
        "id": "nAf0ivycDuk8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def greet(name, msg = \"별일없죠?\"):\n",
        "  print(\"안녕\",name + ',' + msg)\n",
        "\n",
        "greet(\"철수\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4cZIqmH4A3nt",
        "outputId": "c295909c-4db7-461b-c6f7-3aaecdf027d6"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "안녕 철수,별일없죠?\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 키워드 인수 (keyword argument)\n",
        "인수의 이름을 명시적으로 지정해서 값을 매개 변수로 전달하는 방법"
      ],
      "metadata": {
        "id": "JYPMKuKbD3Hs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def sub(x,y,z):\n",
        "  print(\"x=\",x,\"y=\",y,\"z=\",z)\n",
        "\n",
        "sub(10,20,30)          #위치 인수\n",
        "sub(x=10,y=20,z=30)    #키워드 인수\n",
        "sub(10,y=20,z=30)      #섞인 경우"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mJX53gUhD2wz",
        "outputId": "84e1e9d7-66c9-4ae0-e884-18e8796ba956"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "x= 10 y= 20 z= 30\n",
            "x= 10 y= 20 z= 30\n",
            "x= 10 y= 20 z= 30\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#가변 인수"
      ],
      "metadata": {
        "id": "qSopTeE7FyNm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def varfunc(*args):\n",
        "    print(args)\n",
        "\n",
        "print(\"하나의 값으로 호출\")\n",
        "varfunc(10)\n",
        "print(\"여러개의 값으로 호출\")\n",
        "varfunc(10,20,30)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7USm0hiaDsVt",
        "outputId": "45f8d301-9b79-4161-85ac-3d14da52926c"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "하나의 값으로 호출\n",
            "(10,)\n",
            "여러개의 값으로 호출\n",
            "(10, 20, 30)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def add(*numbers):\n",
        "  sum = 0\n",
        "  for n in numbers:\n",
        "    sum += n\n",
        "  return sum\n",
        "\n",
        "print(add(10,20))\n",
        "print(add(10,20,30))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lEDOFpvJGK4J",
        "outputId": "2e7d76cb-5942-4ffe-80f3-e7d0796fbb3f"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "30\n",
            "60\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def myfunc(**kwargs):\n",
        "  result =\"\"\n",
        "  for arg in kwargs.values():\n",
        "    result += arg\n",
        "  return result\n",
        "\n",
        "print(myfunc(a=\"Hi\",b=\"Mr.\",c=\"Kim\"))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WUFPocKXHhum",
        "outputId": "613a3b81-5dad-4be8-ff3e-b65b85f9b5e6"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "HiMr.Kim\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# *연산자로 언패킹하기\n",
        "단일 별표 연산자 * : 파이썬이 제공하는 모든 반복가능한 객체iterable에서 사용가능\n",
        "이중 별표 연산자 ** : 딕셔너리 객체에서만 사용 가능"
      ],
      "metadata": {
        "id": "IyiSICu6H7GJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "alist = [1,2,3,]\n",
        "print(*alist)\n",
        "# 함수 print()로 리스트의 포장을 풀어서 전달"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qP4i9qWsH1U9",
        "outputId": "4fc8ac48-5251-4ae9-9294-99ac93ae4f18"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1 2 3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "alist = [1,2,3]\n",
        "print(alist)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_wF0Z9RmJBUU",
        "outputId": "6e9e1400-8cbb-4d83-b548-589bbe3d2c53"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 3]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def sum(a,b,c):\n",
        "  print(a+b+c)\n",
        "\n",
        "alist = [1,2,3]\n",
        "sum(*alist)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6-Eq2JCcJEA_",
        "outputId": "6a19bbbe-9274-407e-f4fe-c30e748d2dd9"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# LAB 환영 문자열 출력 함수\n",
        "def display(msg , count=1) :\n",
        "  for k in range(count) :\n",
        "    print(msg)\n",
        "\n",
        "display(\"환영합니다.\", 5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FupquJRHJ8iY",
        "outputId": "d17caf50-4e2f-4ae6-9805-fd90eaf1d286"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "환영합니다.\n",
            "환영합니다.\n",
            "환영합니다.\n",
            "환영합니다.\n",
            "환영합니다.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#LAB 이분법\n",
        "def f(x):\n",
        "  return(x**2-x-1)\n",
        "\n",
        "def bisection_method(a, b, error):\n",
        "  if f(a)*f(b) > 0:\n",
        "    print(\"구간에서 근을 찾을 수 없습니다.\")\n",
        "  else:\n",
        "    while (b-a)/2.0 > error :\n",
        "      midpoint = (a + b)/2.0\n",
        "      if f(midpoint) == 0 :\n",
        "       return(midpoint)\n",
        "      elif f(a)*f(midpoint) < 0 :\n",
        "         b = midpoint\n",
        "      else:\n",
        "        a = midpoint\n",
        "\n",
        "    return(midpoint)\n",
        "\n",
        "answer = bisection_method(1,2,0.0001)\n",
        "\n",
        "print(\"x**2-x-1의 근:\", answer)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h1C5VnrgKPhN",
        "outputId": "8f0d11aa-7bd6-4572-fa72-b65415fb8174"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "x**2-x-1의 근: 1.6180419921875\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#LAB 주급계산프로그램\n",
        "def weeklyPay(rate, hour):\n",
        "  money = 0\n",
        "  if hour>30 :\n",
        "    money = rate*30 + 1.5*rate*(hour-30)\n",
        "  else :\n",
        "    money = rate*hour\n",
        "  return money\n",
        "\n",
        "rate = int(input(\"시급을 입력하시오:\"))\n",
        "hour = int(input(\"근무 시간을 입력하시오:\"))\n",
        "\n",
        "print(\"주급은\"+str(weeklyPay(rate,hour)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fYuSNerbK2k_",
        "outputId": "16fa51cd-8691-4262-ee1c-d0b6244ec491"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "시급을 입력하시오:10000\n",
            "근무 시간을 입력하시오:38\n",
            "주급은420000.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#값 반환하기"
      ],
      "metadata": {
        "id": "2UvjC6wMQpJa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#여러 개의 값 반환하기\n",
        "def sub():\n",
        "  return 1,2,3\n",
        "\n",
        "a,b,c, = sub()\n",
        "print(a,b,c)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rNjV7vWXQpBb",
        "outputId": "608ea239-9336-41bf-e3f1-79727f0a2c34"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1 2 3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#값을 반환하지 않는 함수\n",
        "def print_birthday(name):\n",
        "  print(\"생일축하 합니다!\");\n",
        "  print(\"생일축하 합니다!\");\n",
        "  print(\"사랑하는\",name,\"의\");\n",
        "  print(\"생일축하 합니다! \\n\");\n",
        "\n",
        "print_birthday(\"송채원\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-a8LYLPXMP2g",
        "outputId": "8e4ea4db-6b4e-4d2b-945d-fe4a52373cef"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "생일축하 합니다!\n",
            "생일축하 합니다!\n",
            "사랑하는 송채원 의\n",
            "생일축하 합니다! \n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#LAB 여러 개의 값 반환\n",
        "def get_info():\n",
        "  name = input(\"이름:\")\n",
        "  age = int(input(\"나이:\"))\n",
        "  return name, age                # 2개의 값을 반환한다.\n",
        "\n",
        "st_name, st_age = get_info()      # 반환된 값을 풀어서 변수에 저장한다.\n",
        "print(\"이름은 \", st_name, \"이고 나이는\", st_age,\"살입니다.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uLJ7oqgxQneO",
        "outputId": "0ceb2989-1a6a-4e82-863b-8edf4e39c5c7"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "이름:송채원\n",
            "나이23\n",
            "이름은  송채원 이고 나이는 23 살입니다.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#함수를 사용하는 이유\n",
        "소스코드의 중복성을 없애준다.\n",
        "\n",
        "한 번 제작된 함수는 다른 프로그램을 제작할 때도 사용이 가능하다.\n",
        "\n",
        "복잡한 문제를 단순한 부분으로 분해할 수 있다."
      ],
      "metadata": {
        "id": "F891o12JRz0H"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#LAB 사각형을 그리는 함수 작성하기\n",
        "import turtle\n",
        "t = turtle.Turtle()\n",
        "t.shape(\"turtle\")\n",
        "\n",
        "def square(length) :\n",
        "  t.down()\n",
        "  for i in range(4) :\n",
        "    t.forward(length)\n",
        "    lt.left(90)\n",
        "  t.up\n",
        "\n",
        "square(100);\n",
        "t.forward(120);\n",
        "square(100);\n",
        "t.forward(120);\n",
        "square(100);\n",
        "\n",
        "turtle.mainloop()\n",
        "turltle.bye()"
      ],
      "metadata": {
        "id": "kM5OBjApRj18"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#LAB 구조화 프로그래밍 실습\n",
        "\n",
        "def menu():\n",
        "  print(\"1. 섭씨 온도 -> 화씨 온도\")\n",
        "  print(\"2. 화씨 온도 -> 섭씨 온도\")\n",
        "  print(\"3.종료\")\n",
        "  selection = int(input(\"메뉴를 선택하세요: \"))\n",
        "  return selection\n",
        "\n",
        "def ctof(c) :\n",
        "  temp = c*9.0/5.0 + 32\n",
        "  return temp\n",
        "\n",
        "def ftoc(f) :\n",
        "  temp = (f-32.0)*5.0/9.0\n",
        "  return temp\n",
        "\n",
        "def input_f() :\n",
        "  f = float(input(\"화씨 온도를 입력하시오: \"))\n",
        "  return f\n",
        "\n",
        "def input_c() :\n",
        "  c = float(input(\"섭씨 온도를 입력하시오: \"))\n",
        "  return c\n",
        "\n",
        "def main() :\n",
        "  while True:\n",
        "    index = menu()\n",
        "    if index == 1 :\n",
        "      t = input_c()\n",
        "      t2 = ctof(t)\n",
        "      print(\"화씨 온도 =\", t2, \"\\n\")\n",
        "    elif index == 2 :\n",
        "      t = input_f()\n",
        "      t2 = ftoc(t)\n",
        "      print(\"섭씨 온도 =\", t2, \"\\n\")\n",
        "    else :\n",
        "      break\n",
        "main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X5OkV9-MTgza",
        "outputId": "69bcc40e-f956-4b32-eee7-1da3c34edb20"
      },
      "execution_count": 30,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "1. 섭씨 온도 -> 화씨 온도\n",
            "2. 화씨 온도 -> 섭씨 온도\n",
            "3.종료\n",
            "메뉴를 선택하세요: 1\n",
            "섭씨 온도를 입력하시오: 37\n",
            "화씨 온도 = 98.6 \n",
            "\n",
            "1. 섭씨 온도 -> 화씨 온도\n",
            "2. 화씨 온도 -> 섭씨 온도\n",
            "3.종료\n",
            "메뉴를 선택하세요: 3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#순환 호출\n",
        "순환(recursion)이란 어떤 알고리즘이나 함수가 자기 자신을 호출하여 문제를 해결하는 프로그래밍 기법"
      ],
      "metadata": {
        "id": "Cwfh6jB2Vx7t"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def factorial(n):\n",
        "  if n == 1:\n",
        "    return(1)\n",
        "  else :\n",
        "    return n * factorial(n-1)\n",
        "\n",
        "n = eval(input(\"정수를 입력하시오:\"))\n",
        "print(n,\"!=\", factorial(n))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mD1JSS_cUw-L",
        "outputId": "29044b77-c7f0-4843-dc10-dd6c4e7d5ff4"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "정수를 입력하시오:10\n",
            "10 != 3628800\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#LAB 프랙탈 그래픽\n",
        "import turtle\n",
        "\n",
        "def drawTree(branch, t) :\n",
        "  if branch > 5 :\n",
        "    t.forward(branch)\n",
        "    t.right(20)\n",
        "    drawTree(branch-15,t)    #순환 호출\n",
        "    t.left(40)\n",
        "    drawTree(branch-15,t)    #순환 호출\n",
        "    t.right(20)\n",
        "    t.backward(branch)\n",
        "\n",
        "def main() :\n",
        "  t = turtle.Turtle()\n",
        "  window = turtle.Screen()\n",
        "  t.left(90)\n",
        "  t.up()\n",
        "  t.backward(200)\n",
        "  t.down\n",
        "  t.color(\"green\")\n",
        "  drawTree(100,t)\n",
        "  window.exitonclick()\n",
        "\n",
        "main()"
      ],
      "metadata": {
        "id": "9oeIon7WWOR1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#변수의 범위\n",
        "지역 변수(local variable) : 함수 안에서 생성되는 변수\n",
        "\n",
        "전역 변수(global variable) :함수의 외부에서 생성되어 프로그램의 어디서나 사용할 수 있는 변수"
      ],
      "metadata": {
        "id": "4DMyHGClYHlU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#지역 변수 - x를 함수외부에서 사용 불가능\n",
        "def myfunc():\n",
        "  x = 100\n",
        "  print(x)\n",
        "\n",
        "myfunc()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "58tnoDFxYVt3",
        "outputId": "469610bc-46e3-4b8b-c340-814025a58744"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "100\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#전역 변수\n",
        "gx = 100\n",
        "\n",
        "def myfunc():\n",
        "  print(gx)\n",
        "\n",
        "myfunc()\n",
        "print(gx)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x4KYlQ8MYdm4",
        "outputId": "8d7bca70-dc2f-42f5-ee57-980d087fcf54"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "100\n",
            "100\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#LAB 함수 그리기\n",
        "import turtle\n",
        "t = turtle.Turtle()\n",
        "t.shape(\"turtle\")\n",
        "t.speed(0)\n",
        "\n",
        "def f(x):\n",
        "  return x**2+1\n",
        "\n",
        "t.goto(200,0)\n",
        "t.goto(0,0)\n",
        "t.goto(0,200)\n",
        "t.goto(0,0)\n",
        "\n",
        "for x in range(150) :\n",
        "  t.goto(x,int(0.01*f(x)))\n",
        "\n",
        "turtle.mainloop()\n",
        "turtle.bye()"
      ],
      "metadata": {
        "id": "Syp64dBfZnOR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#LAB 막대 그래프 그리기\n",
        "import turtle\n",
        "\n",
        "def drawBar(height):\n",
        "  t.begin_fill()\n",
        "  t.left(90)\n",
        "  t.forward(height)\n",
        "  t.write(str(height), font=('Times New Roman',16,'bold'))\n",
        "  t.right(90)\n",
        "\n",
        "  t.forward(40)\n",
        "  t.right(90)\n",
        "  t.forward(height)\n",
        "  t.left(90)\n",
        "  t.end_fill()\n",
        "\n",
        "data = [120, 56, 309, 220, 156, 23, 98]\n",
        "\n",
        "t = turtle.Turtle()\n",
        "t.color(\"pink\")\n",
        "t.fillcolor(\"yellow\")\n",
        "\n",
        "t.pensize(3)\n",
        "\n",
        "for d in data:\n",
        "  drawBar(d)\n",
        "\n",
        "turtle.mainloop()\n",
        "turtle.bye()"
      ],
      "metadata": {
        "id": "2eylZyjEacdl"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
