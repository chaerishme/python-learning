# -*- coding: utf-8 -*-
"""Chap05 LAB.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FZBsezTZoR21CtwWZai9V6S6_oLBCc1o
"""

#피자의 면적을 비교하는 프로그램
def main() :
  print("20cm 피자 2개의 면적:", get_area(20) * 2)
  print("30cm 피자 1개의 면적:", get_area(30))

## 원의 면적을 계산한다.
# 원의 반지름을 받는 매개변수 radius
def get_area(radius) :
  if radius > 0 :
    area = 3.14 * radius**2
  else :
    area = 0
  return area

main()

"""# 디폴트 인수 (default argument)

인수가 부족한 경우에 기본값을 넣어주는 메카니즘
"""

def greet(name, msg = "별일없죠?"):
  print("안녕",name + ',' + msg)

greet("철수")

"""# 키워드 인수 (keyword argument)
인수의 이름을 명시적으로 지정해서 값을 매개 변수로 전달하는 방법
"""

def sub(x,y,z):
  print("x=",x,"y=",y,"z=",z)

sub(10,20,30)          #위치 인수
sub(x=10,y=20,z=30)    #키워드 인수
sub(10,y=20,z=30)      #섞인 경우

"""#가변 인수"""

def varfunc(*args):
    print(args)

print("하나의 값으로 호출")
varfunc(10)
print("여러개의 값으로 호출")
varfunc(10,20,30)

def add(*numbers):
  sum = 0
  for n in numbers:
    sum += n
  return sum

print(add(10,20))
print(add(10,20,30))

def myfunc(**kwargs):
  result =""
  for arg in kwargs.values():
    result += arg
  return result

print(myfunc(a="Hi",b="Mr.",c="Kim"))

"""# *연산자로 언패킹하기
단일 별표 연산자 * : 파이썬이 제공하는 모든 반복가능한 객체iterable에서 사용가능
이중 별표 연산자 ** : 딕셔너리 객체에서만 사용 가능
"""

alist = [1,2,3,]
print(*alist)
# 함수 print()로 리스트의 포장을 풀어서 전달

alist = [1,2,3]
print(alist)

def sum(a,b,c):
  print(a+b+c)

alist = [1,2,3]
sum(*alist)

# LAB 환영 문자열 출력 함수
def display(msg , count=1) :
  for k in range(count) :
    print(msg)

display("환영합니다.", 5)

#LAB 이분법
def f(x):
  return(x**2-x-1)

def bisection_method(a, b, error):
  if f(a)*f(b) > 0:
    print("구간에서 근을 찾을 수 없습니다.")
  else:
    while (b-a)/2.0 > error :
      midpoint = (a + b)/2.0
      if f(midpoint) == 0 :
       return(midpoint)
      elif f(a)*f(midpoint) < 0 :
         b = midpoint
      else:
        a = midpoint

    return(midpoint)

answer = bisection_method(1,2,0.0001)

print("x**2-x-1의 근:", answer)

#LAB 주급계산프로그램
def weeklyPay(rate, hour):
  money = 0
  if hour>30 :
    money = rate*30 + 1.5*rate*(hour-30)
  else :
    money = rate*hour
  return money

rate = int(input("시급을 입력하시오:"))
hour = int(input("근무 시간을 입력하시오:"))

print("주급은"+str(weeklyPay(rate,hour)))

"""#값 반환하기"""

#여러 개의 값 반환하기
def sub():
  return 1,2,3

a,b,c, = sub()
print(a,b,c)

#값을 반환하지 않는 함수
def print_birthday(name):
  print("생일축하 합니다!");
  print("생일축하 합니다!");
  print("사랑하는",name,"의");
  print("생일축하 합니다! \n");

print_birthday("송채원")

#LAB 여러 개의 값 반환
def get_info():
  name = input("이름:")
  age = int(input("나이:"))
  return name, age                # 2개의 값을 반환한다.

st_name, st_age = get_info()      # 반환된 값을 풀어서 변수에 저장한다.
print("이름은 ", st_name, "이고 나이는", st_age,"살입니다.")

"""#함수를 사용하는 이유
소스코드의 중복성을 없애준다.

한 번 제작된 함수는 다른 프로그램을 제작할 때도 사용이 가능하다.

복잡한 문제를 단순한 부분으로 분해할 수 있다.
"""

#LAB 사각형을 그리는 함수 작성하기
import turtle
t = turtle.Turtle()
t.shape("turtle")

def square(length) :
  t.down()
  for i in range(4) :
    t.forward(length)
    lt.left(90)
  t.up

square(100);
t.forward(120);
square(100);
t.forward(120);
square(100);

turtle.mainloop()
turltle.bye()

#LAB 구조화 프로그래밍 실습

def menu():
  print("1. 섭씨 온도 -> 화씨 온도")
  print("2. 화씨 온도 -> 섭씨 온도")
  print("3.종료")
  selection = int(input("메뉴를 선택하세요: "))
  return selection

def ctof(c) :
  temp = c*9.0/5.0 + 32
  return temp

def ftoc(f) :
  temp = (f-32.0)*5.0/9.0
  return temp

def input_f() :
  f = float(input("화씨 온도를 입력하시오: "))
  return f

def input_c() :
  c = float(input("섭씨 온도를 입력하시오: "))
  return c

def main() :
  while True:
    index = menu()
    if index == 1 :
      t = input_c()
      t2 = ctof(t)
      print("화씨 온도 =", t2, "\n")
    elif index == 2 :
      t = input_f()
      t2 = ftoc(t)
      print("섭씨 온도 =", t2, "\n")
    else :
      break
main()

"""#순환 호출
순환(recursion)이란 어떤 알고리즘이나 함수가 자기 자신을 호출하여 문제를 해결하는 프로그래밍 기법
"""

def factorial(n):
  if n == 1:
    return(1)
  else :
    return n * factorial(n-1)

n = eval(input("정수를 입력하시오:"))
print(n,"!=", factorial(n))

#LAB 프랙탈 그래픽
import turtle

def drawTree(branch, t) :
  if branch > 5 :
    t.forward(branch)
    t.right(20)
    drawTree(branch-15,t)    #순환 호출
    t.left(40)
    drawTree(branch-15,t)    #순환 호출
    t.right(20)
    t.backward(branch)

def main() :
  t = turtle.Turtle()
  window = turtle.Screen()
  t.left(90)
  t.up()
  t.backward(200)
  t.down
  t.color("green")
  drawTree(100,t)
  window.exitonclick()

main()

"""#변수의 범위
지역 변수(local variable) : 함수 안에서 생성되는 변수

전역 변수(global variable) :함수의 외부에서 생성되어 프로그램의 어디서나 사용할 수 있는 변수
"""

#지역 변수 - x를 함수외부에서 사용 불가능
def myfunc():
  x = 100
  print(x)

myfunc()

#전역 변수
gx = 100

def myfunc():
  print(gx)

myfunc()
print(gx)

#LAB 함수 그리기
import turtle
t = turtle.Turtle()
t.shape("turtle")
t.speed(0)

def f(x):
  return x**2+1

t.goto(200,0)
t.goto(0,0)
t.goto(0,200)
t.goto(0,0)

for x in range(150) :
  t.goto(x,int(0.01*f(x)))

turtle.mainloop()
turtle.bye()

#LAB 막대 그래프 그리기
import turtle

def drawBar(height):
  t.begin_fill()
  t.left(90)
  t.forward(height)
  t.write(str(height), font=('Times New Roman',16,'bold'))
  t.right(90)

  t.forward(40)
  t.right(90)
  t.forward(height)
  t.left(90)
  t.end_fill()

data = [120, 56, 309, 220, 156, 23, 98]

t = turtle.Turtle()
t.color("pink")
t.fillcolor("yellow")

t.pensize(3)

for d in data:
  drawBar(d)

turtle.mainloop()
turtle.bye()